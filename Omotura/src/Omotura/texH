#pragma once

#include <string>
#include<glad/glad.h>
#include<stb/stb_image.h>

#include "../Common/Common.h"

#include "ShaderClass.h"

namespace Omotura
{
    enum class ImageFormat
    {
        NONE = 0,
        RED,
        RG,
        RGB,
        RGBA
    };

    struct TextureSpecification
    {
        uint32_t iWidth = 1;
        uint32_t iHeight = 1;
        ImageFormat format = ImageFormat::NONE;
        bool bGenerateMips = true;
    };

    class Texture
    {
    public:
        Texture() = default;
        Texture(GLenum TextureTarget, std::string FileName);

        //static Shared<Texture> Create(const TextureSpecification& _specification);

        bool Load();

        void Bind(Shader& _shader, const char* _uniform, GLenum TextureUnit);



        GLuint GetTexture() const { return m_textureObj; }

    private:
        void LoadInternal(const void* pImageData);

        std::string m_fileName;
        GLenum m_textureTarget;
        GLuint m_textureObj;
        int m_imageWidth = 0;
        int m_imageHeight = 0;
        int m_imageBPP = 0;
    };
}
