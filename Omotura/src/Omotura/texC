#include "Texture.h"

namespace Omotura
{
    Texture::Texture(GLenum TextureTarget, std::string FileName)
        : m_textureObj()
    {
        m_textureTarget = TextureTarget;
        m_fileName = FileName;
    }

    bool Texture::Load()
    {
        stbi_set_flip_vertically_on_load(true);

        unsigned char* pImageData = stbi_load(m_fileName.c_str(), &m_imageWidth, &m_imageHeight, &m_imageBPP, 0);

        if (!pImageData) {
            printf("Can't load texture from '%s' - %s\n", m_fileName.c_str(), stbi_failure_reason());
            stbi_image_free(pImageData);
            exit(0);
        }

        printf("Width %d, height %d, bpp %d\n", m_imageWidth, m_imageHeight, m_imageBPP);

        LoadInternal(pImageData);

        stbi_image_free(pImageData);

        return true;
    }

    void Texture::LoadInternal(const void* pImageData)
    {
        glGenTextures(1, &m_textureObj);
        glBindTexture(m_textureTarget, m_textureObj);

        if (m_textureTarget == GL_TEXTURE_2D) {
            switch (m_imageBPP) {
            case 1:
                glTexImage2D(m_textureTarget, 0, GL_RED, m_imageWidth, m_imageHeight, 0, GL_RED, GL_UNSIGNED_BYTE, pImageData);
                break;

            case 2:
                glTexImage2D(m_textureTarget, 0, GL_RG, m_imageWidth, m_imageHeight, 0, GL_RG, GL_UNSIGNED_BYTE, pImageData);
                break;

            case 3:
                glTexImage2D(m_textureTarget, 0, GL_RGB, m_imageWidth, m_imageHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, pImageData);
                break;

            case 4:
                glTexImage2D(m_textureTarget, 0, GL_RGBA, m_imageWidth, m_imageHeight, 0, GL_RGBA, GL_UNSIGNED_BYTE, pImageData);
                break;
            }
        }
        else {
            printf("Support for texture target %x is not implemented\n", m_textureTarget);
            exit(1);
        }

        glTexParameteri(m_textureTarget, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
        glTexParameteri(m_textureTarget, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexParameteri(m_textureTarget, GL_TEXTURE_BASE_LEVEL, 0);
        glTexParameteri(m_textureTarget, GL_TEXTURE_WRAP_S, GL_REPEAT);
        glTexParameteri(m_textureTarget, GL_TEXTURE_WRAP_T, GL_REPEAT);

        glGenerateMipmap(m_textureTarget);

        glBindTexture(m_textureTarget, m_textureObj);
    }

    void Texture::Bind(Shader& _shader, const char* _uniform, GLenum TextureUnit)
    {
        _shader.Activate();
        glUniform1i(glGetUniformLocation(_shader.ID, _uniform), TextureUnit);

        glActiveTexture(TextureUnit);
        glBindTexture(m_textureTarget, m_textureObj);
    }
}
